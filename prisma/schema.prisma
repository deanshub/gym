// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum MuscleGroup {
  NECK
  UPPER_TRAPS
  MIDDLE_TRAPS
  FRONT_SHOULDERS
  REAR_SHOULDERS
  CHEST
  TRICEPS
  BICEPS
  FOREARMS
  HANDS
  LATS
  OBLIQUES
  ABDOMINALS
  LOWER_BACK
  GLUTES
  QUADS
  HAMSTRINGS
  CALVES
}

enum WeightType {
  BODYWEIGHT
  PER_SIDE // Weight per side (e.g., 20kg per side on barbell)
  TOTAL_WEIGHT // Total weight including bar/equipment
  SINGLE_WEIGHT // Single dumbbell/kettlebell weight
}

model User {
  id        String   @id
  email     String   @unique
  password  String   // Hashed password
  name      String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  programs             Program[]
  workouts             Workout[]
  weightLogs           WeightLog[]
  progressPhotos       ProgressPhoto[]
  exercisePerformances ExercisePerformance[]

  @@map("users")
}

model Program {
  id        String     @id
  userId    String     @map("user_id")
  name      String
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercises Exercise[]
  workouts  Workout[]

  @@map("programs")
}

model Exercise {
  id         String      @id
  programId  String      @map("program_id")
  name       String
  group      MuscleGroup
  weightType WeightType  @default(TOTAL_WEIGHT) @map("weight_type")
  sets       Int // Default/template values
  reps       Int // Default/template values
  weight     Float // Default/template values
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")
  program    Program     @relation(fields: [programId], references: [id], onDelete: Cascade)

  // Track actual performance
  exercisePerformances ExercisePerformance[]

  @@map("exercises")
}

model Workout {
  id        String    @id
  userId    String    @map("user_id")
  programId String    @map("program_id")
  startTime DateTime  @map("start_time")
  endTime   DateTime? @map("end_time")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  program   Program   @relation(fields: [programId], references: [id], onDelete: Cascade)

  exercisePerformances ExercisePerformance[]

  @@map("workouts")
}

model ProgressPhoto {
  id        String   @id
  userId    String   @map("user_id")
  filename  String   // Original filename
  filepath  String   // Path to stored file
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("progress_photos")
}

model WeightLog {
  id        String   @id
  userId    String   @map("user_id")
  weight    Float    // Weight in kg
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("weight_logs")
}

model ExercisePerformance {
  id         String   @id
  userId     String   @map("user_id")
  workoutId  String   @map("workout_id")
  exerciseId String   @map("exercise_id")
  sets       Int // Actual performed sets
  reps       Int // Actual performed reps
  weight     Float // Actual performed weight
  startTime  DateTime @map("start_time")
  endTime    DateTime @map("end_time")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workout  Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@map("exercise_performances")
}
